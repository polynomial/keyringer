[[!meta title="Keyringer: development guidelines and workflow"]]

Development environment
-----------------------

The following steps needs to be run just once.

### Create the `debian/` structure

    if [ ! -d "debian" ]; then
      dh_make -p keyringer_0.1 --createorig
    fi

### Setup a sid pbuilder chroot

    DIST=sid sudo pbuilder create --debootstrapopts --variant=buildd

### Setup a sid cowbuilder chroot

    DIST=sid sudo cowbuilder --create

Environment maintenance
-----------------------

These steps should be run once in a while to ensure we have an up to date packaging environment.

### Pbuilder

    DIST=sid sudo pbuilder update

### Cowbuilder

    DIST=sid sudo cowbuilder --update

Release workflow
----------------

Go to master branch

    git checkout master

Prepare the source code:

    $EDITOR ChangeLog
    make build_man

Commit and tag a release:

    git commit -a -m "Keyringer $VERSION"
    git tag -s $VERSION -m "Keyringer $VERSION"

Create a release file:

    make tarball

Sign the release ([see backupninja development guidelines](https://labs.riseup.net/code/projects/backupninja/wiki/Release)):

    cd ../tarballs
    gpg --armor --detach-sign keyringer-$VERSION.tar.bz2

Upload the release:

    scp keyringer-$VERSION.tar.bz2* server:/var/sites/keyringer/releases/
    cd -

Update the debian branch:

    git checkout debian
    git-import-orig --upstream-vcs-tag=$VERSION ../tarballs/keyringer-$VERSION.tar.bz2
    dch -e # fine tune the changelog prepared by git-dch

Push everything:

    git push --tags

Build the package from the debian Git branch:

    git-buildpackage

Run lintian (or [add it to your pbuilder hooks](http://askubuntu.com/questions/140697/how-do-i-run-lintian-from-pbuilder-dist)):

    lintian --info --display-info --pedantic --color auto \
     ../build-area/keyringer_$VERSION*.changes

Notes:

* `git-import-orig` takes care of running `pristine-tar commit`, of merging of the tag and orig tarball into the upstream branch, and then it merges the result into the debian branch. With the above configuration, it also runs git-dch to do the bulk of the work in `debian/changelog`.
* To build a development package, checkout the debian branch, merge master, run `git-dch --auto --snapshot` and build. 

Adding a subcommand
-------------------

When adding a new subcommand, ensure:

* Manpage is updated.
* Shell completions are updated.

References
----------

* [Using Git for Debian Packaging](http://www.eyrie.org/~eagle/notes/debian/git.html).
* [Building packages from the Git repository](http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.building.html).
* [Cowbuilder](https://wiki.debian.org/cowbuilder).
* [git-pbuilder](https://wiki.debian.org/git-pbuilder).
* [PackagingWithGit - Debian Wiki](https://wiki.debian.org/PackagingWithGit).
* [Generating pristine tarballs from git repositories](http://joeyh.name/blog/entry/generating_pristine_tarballs_from_git_repositories/).
